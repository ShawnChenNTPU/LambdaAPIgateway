{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Thesis_CHF_NWDAF_lambda","provenance":[],"authorship_tag":"ABX9TyPldR6Ac5Xt8DT9QBPMeLmY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **Registration**"],"metadata":{"id":"Sj-gO-wS0hVi"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"bXg5uoy20GfQ"},"outputs":[],"source":["#registration\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","\n","def lambda_handler(event, context):\n","    for k in range(0,6011,1):\n","        k=str(k)\n","        userid=\"imsi-20893\"+str(k.zfill(10))\n","        ueID = userid\n","        dynamodb = boto3.resource('dynamodb', region_name='us-east-1')\n","        table = dynamodb.Table('Subscribe_User')\n","        dynamodb_client = boto3.client('dynamodb')\n","        startSession = table.put_item(\n","            Item={\n","                'ue_ID': ueID,\n","                'Units': \"4.8\" #initial GU\n","            }\n","        )\n","      \n","    output = \" Create Successful!!\" \n","    response = {'statusCode': 200, 'body' : output}\n","    return response\n","    "]},{"cell_type":"markdown","source":["## **Get Subscribe_User**"],"metadata":{"id":"PLEnjQYO03OR"}},{"cell_type":"code","source":["#get Subscribe_User \n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    ueID = event['ue_ID']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","    suscribetable=dynamodb_resource.Table('Subscribe_User')\n","    GU_old = suscribetable.query(\n","        KeyConditionExpression=Key('ue_ID').eq(ueID)\n","    )\n","    for i in GU_old['Items']:\n","        GU_value=i['Units']\n","    output=GU_value\n","    response = {'statusCode': 200, 'body' : output}\n","    return response"],"metadata":{"id":"RL4zlZXJ0y9m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Nadrf_Datamanagement_Retrieval_Request**"],"metadata":{"id":"15IJCc2h10fd"}},{"cell_type":"code","source":["#Nadrf_Datamanagement_Retrieval_Request(get_predict_data)\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    ueID = event['ue_ID']\n","    Time = event['datetime']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","    #uetable = dynamodb_resource.Table(ueID)\n","    uetable = dynamodb_resource.Table('Predict_data')\n","    # GU_cost = uetable.query(\n","    #     KeyConditionExpression=Key('datetime').eq(Time)\n","    # )\n","    Predict_GU = uetable.get_item(Key={'ueid': ueID, 'datetime': Time})\n","     \n","    # for i in GU_cost['Items']:\n","    #     GU_cumsume=i['Internet']\n","    rea= Predict_GU['Item']\n","    Predict_GU=rea['predictdata']\n","    \n","    output=Predict_GU\n","    response = {'statusCode': 200, 'body' : output}\n","    return response\n","    \n"],"metadata":{"id":"cmQuVqgR1r2f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Get_internet_data**"],"metadata":{"id":"k0Fmrarz2DAG"}},{"cell_type":"code","source":["#get_internet_data\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    ueID = event['ue_ID']\n","    Time = event['datetime']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","    #uetable = dynamodb_resource.Table(ueID)\n","    uetable = dynamodb_resource.Table('ADRF')\n","    # GU_cost = uetable.query(\n","    #     KeyConditionExpression=Key('datetime').eq(Time)\n","    # )\n","    GU_cost = uetable.get_item(Key={'ueid': ueID, 'datetime': Time})\n","     \n","    # for i in GU_cost['Items']:\n","    #     GU_cumsume=i['Internet']\n","    rea=GU_cost['Item']\n","    GU_cumsume=rea['Internet']\n","    \n","    output=GU_cumsume\n","    response = {'statusCode': 200, 'body' : output}\n","    return response\n","    \n"],"metadata":{"id":"nSg9KwUp17Cu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Write Session**"],"metadata":{"id":"Am4Qj5Bq2O6n"}},{"cell_type":"code","source":[" \n","import boto3, json, os, datetime as dt\n","import urllib3\n","http = urllib3.PoolManager()\n","from boto3.dynamodb.conditions import Key, Attr\n","\n","def getGuvalues(ueID):\n","    data = json.dumps({'ue_ID':ueID})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","    \n","def putGU(ueID,value):\n","    data = json.dumps({'ue_ID':ueID,'value':value})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    return response\n","    \n","def getInternetvalues(ueID,time):\n","    data = json.dumps({'ue_ID':ueID,'datetime':time})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","\n","    \n","def lambda_handler(event, context):\n","    ueID = event['ue_ID']\n","    time = event['time']\n","    GU_old=float(getGuvalues(ueID))\n","    GU_consume=float(getInternetvalues(ueID,time))\n","    GU_new=GU_old-GU_consume\n","    GU_new=str(GU_new)\n","    putGU(ueID,GU_new)\n","    output=time+\" [CTF]\" +ueID+\" Collecting Charging Event.\"\n","    response = {'statusCode': 200, 'body' : output}\n","    return response"],"metadata":{"id":"hLN0uu6Q2GN3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Put_dynamodb**"],"metadata":{"id":"l_trUJX33Nm6"}},{"cell_type":"code","source":["#put_dynamodb\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    #body = json.loads(event['body'])\n","    ueID = event['ue_ID']\n","    value= event['value']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","    \n","    suscribetable=dynamodb_resource.Table('Subscribe_User')\n","    GU_old = suscribetable.query(\n","        KeyConditionExpression=Key('ue_ID').eq(ueID)\n","    )\n","  \n","\n","    suscribetable.update_item(\n","    Key={ 'ue_ID': ueID,},\n","    UpdateExpression=\"set Units=:u\",\n","    ExpressionAttributeValues={\n","       ':u': value\n","    },\n","    )\n","    \n","    response = {'statusCode': 200, 'body' : \"put ok\"}\n","    return response\n","    \n"],"metadata":{"id":"_Le-VIMM2SLM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Nchf_ConvergedChargingFunction_update**"],"metadata":{"id":"sYURcGgH3SLm"}},{"cell_type":"code","source":[" \n","import boto3, json, os, datetime as dt\n","import urllib3\n","http = urllib3.PoolManager()\n","from boto3.dynamodb.conditions import Key, Attr\n","\n","def getGuvalues(ueID):\n","    data = json.dumps({'ue_ID':ueID})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","\n","def getpredictvalue(ueID,time):\n","    data = json.dumps({'ue_ID':ueID,'datetime':time})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","    \n","def putGU(ueID,value):\n","    data = json.dumps({'ue_ID':ueID,'value':value})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    return response\n","    \n","def nchf_convergedchargingfunction_update(ueID,time):\n","    data = json.dumps({'ue_ID':ueID,'datetime':time})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","     \n","def lambda_handler(event, context):\n","    ueID = event['ue_ID']\n","    time = event['datetime']\n","    data_GU=float(getGuvalues(ueID))\n","    data_predict=float(getpredictvalue(ueID,time))\n","    # if data_GU<=0.0:\n","    data_GU=data_predict+data_GU\n","    data_GU=str(data_GU)\n","    putGU(ueID,data_GU)\n","    output=time+\" [CHF] \" +ueID+ \" GU exhausted, Updating...\"\n","    response = {'statusCode': 200, 'body' : output}\n","    return response\n","    # else:\n","    #     output=time+\" [CHF]\" +ueID+ \" GU enough, no need to update.\"\n","    #     response = {'statusCode': 200, 'body' : output}\n","    #     return response\n","    # data_GU_check=float(getGuvalues(ueID))\n","    # if data_GU_check<=0.0:\n","    #     nchf_convergedchargingfunction_update(ueID, time)\n"],"metadata":{"id":"_fL4vJxH2sBZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Nchf_ConvergedChargingFunction_release**"],"metadata":{"id":"TMQcHOlF3YX9"}},{"cell_type":"code","source":["import json\n","import urllib3\n","http = urllib3.PoolManager()\n","import numpy as np\n","import boto3\n","def getInternetvalues(ueID,time):\n","    data = json.dumps({'ue_ID':ueID,'datetime':time})\n","    URL=''\n","    response = http.request('POST',URL, body=data)\n","    response=response.data.decode()\n","    response=json.loads(response)\n","    response=response['body']\n","    return response\n","    \n","def lambda_handler(event, context):\n","    CDR=[]\n","    for i in range(1,8,1):\n","        i=str(i)\n","        for j in range(0,24,1):\n","            j=str(j)\n","            j=j.zfill(2)\n","            time=\"2013-11-0\"+i+\" \"+j+\":00:00\"\n","            for k in range(1,6011,1):\n","                k=str(k)\n","                ueID=\"imsi-20893\"+str(k.zfill(10))\n","                internetdata=getInternetvalues(ueID,time)\n","                CDR.append(internetdata)\n","    CDR=np.array(CDR)\n","    s3 = boto3.client('s3')\n","    s3_resource = boto3.resource('s3')\n","    np.save('/tmp/CDR.npy', CDR)\n","    s3_resource.Bucket('nadrf-datamanagement').upload_file(\"/tmp/CDR.npy\",\"CDR.npy\")                \n","    output=\"release sucessful!!\"\n","    return {\n","                'statusCode': 200,\n","                'body': output\n","            }\n"],"metadata":{"id":"5nwz5mRW2wRQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Nadrf_Datamanagement_StorageRequest"],"metadata":{"id":"KtWATOlItemR"}},{"cell_type":"code","source":["import json\n","import urllib3\n","http = urllib3.PoolManager()\n","import numpy as np\n","import boto3\n","from io import BytesIO\n","from urllib.parse import urlparse\n","def lambda_handler(event, context):\n","    client = boto3.client(\"s3\")\n","    bytes_ = BytesIO()\n","    parsed_s3 = urlparse(\"s3://thesisntpu20220513/Subscirbe_event_20200715.npy\")\n","    client.download_fileobj(\n","        Fileobj=bytes_, Bucket=parsed_s3.netloc, Key=parsed_s3.path[1:]\n","    )\n","    bytes_.seek(0)\n","    data=np.load(bytes_, allow_pickle=True)\n","    # a=data[0][0]\n","    # a=str(a)\n","    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')\n","    table = dynamodb.Table('Predict_data')\n","    dynamodb_client = boto3.client('dynamodb')\n","    count=0\n","    for k in range(1,6011,1):\n","        k=str(k)\n","        ueID=\"imsi-20893\"+str(k.zfill(10))\n","        for i in range(1,8,1):\n","            i=str(i)\n","            for j in range(0,24,1):\n","                j=str(j)\n","                j=j.zfill(2)\n","                time=\"2013-11-0\"+i+\" \"+j+\":00:00\"\n","                startSession = table.put_item(\n","                    Item={\n","                        'ueid': ueID,\n","                        'datetime': time,\n","                        'predictdata':str(data[count][0])\n","                    }\n","                )\n","                count=count+1\n","                    \n","             \n","    output=\"Created\"\n","    return {\n","                'statusCode': 201,\n","                'body': output\n","            }\n"],"metadata":{"id":"Lw5K2j7atVHg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## put_subscribe_table_V2\n"],"metadata":{"id":"5vCeaw2qGhye"}},{"cell_type":"code","source":["#put_subscribe_table\n","import json\n","import boto3\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    data=event[\"data\"]\n","    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')\n","    table = dynamodb.Table('Subscribe_User_')\n","    dynamodb_client = boto3.client('dynamodb')\n","    startSession = table.put_item(\n","        Item=data\n","    )\n","    return {\n","        'statusCode': 200,\n","        'body': json.dumps('OK')\n","    }\n"],"metadata":{"id":"DvxjlmFbGOwP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## get_predict_table"],"metadata":{"id":"iEu5rJhDs-RQ"}},{"cell_type":"code","source":["#get_predict_table\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    Time = event['datetime']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","\n","    uetable = dynamodb_resource.Table('Predict_table_')\n","    GU_cost = uetable.get_item(Key={'datetime': Time})\n","\n","    rea=GU_cost['Item']\n","    \n","    response = {'statusCode': 200, 'body' : rea}\n","    return response\n","    \n"],"metadata":{"id":"x1snTlGWGgz_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Get_Internet_Usage_Table"],"metadata":{"id":"UZ_jxerEtMpC"}},{"cell_type":"code","source":["#get_ADRF\n","import boto3, json, os, datetime as dt\n","from random import randrange\n","from boto3.dynamodb.conditions import Key, Attr\n","def lambda_handler(event, context):\n","    Time = event['datetime']\n","    dynamodb_resource = boto3.resource('dynamodb')\n","\n","    uetable = dynamodb_resource.Table('ADRF_')\n","    GU_cost = uetable.get_item(Key={'datetime': Time})\n","\n","    rea=GU_cost['Item']\n","    \n","    response = {'statusCode': 200, 'body' : rea}\n","    return response\n","    \n"],"metadata":{"id":"14_i2FyXtBnT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"AZK5JpMuMYHl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Registraction"],"metadata":{"id":"mLVvUZe2McXE"}},{"cell_type":"code","source":["Registraction"],"metadata":{"id":"5sYZTYqZL413"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import json\n","import json\n","import boto3\n","def lambda_handler(event, context):\n","    s3 = boto3.resource('s3')\n","    obj = s3.Object('thesisntpu20220513', 'reset.json')\n","    data = json.load(obj.get()['Body']) \n","    dynamodb_resource = boto3.resource('dynamodb')\n","    table = dynamodb_resource.Table('Subscribe_User_')\n","    startSession = table.put_item(\n","        Item=data\n","        )\n","    # TODO implement\n","    return {\n","        'statusCode': 200,\n","        'body': \"OK\"\n","    }"],"metadata":{"id":"Vw0umwueMYko"},"execution_count":null,"outputs":[]}]}